#pragma kernel Init
#pragma kernel BitonicSortParticles
#pragma kernel BitonicSortKinematicParticles
#pragma kernel ResetCellOffsets
#pragma kernel CalculateCellOffsets
#pragma kernel CalculateKinematicCellOffsets
#pragma kernel CalculateDensity
#pragma kernel CalculateForce
#pragma kernel CalculateKinematicForce
#pragma kernel CalculateForce2
#pragma kernel Update
#pragma kernel Emit

#include "./ParticleCommon.cginc"

RWStructuredBuffer<Particle> _Particles;
StructuredBuffer<Explosion> _Explosions;
RWStructuredBuffer<KinematicParticle> _KinematicParticles;
RWStructuredBuffer<float3> _KinematicForcesAndBuoyances;
RWStructuredBuffer<uint> _CellOffsets;

AppendStructuredBuffer<uint> _Dead;
ConsumeStructuredBuffer<uint> _Pool;
AppendStructuredBuffer<uint> _Alive;
AppendStructuredBuffer<uint> _SteamAlive;
AppendStructuredBuffer<uint> _FireAlive;

uint _CounterOffset;
StructuredBuffer<uint> _Counter;
StructuredBuffer<float4> _Uploads;

Texture2D<float3> _TerrainDistanceField;
SamplerState sampler_TerrainDistanceField;
float4 _TerrainDistanceFieldScale; // x = 1 / width, y = 1 / height, z = width, w = height

static const float Wpoly6 = 1.56668147106;
static const float GradientWspiky = -14.3239448783;
static const float LaplacianWviscosity = 14.3239448783;
static const uint TYPE_WATER = 1;
static const uint TYPE_STEAM = 2;
static const uint TYPE_FIRE = 3;

int _SortBlock;
int _SortDim;
uint _SortCount;

float _RestDensity;
float _PressureConstant;
float _Viscosity;

uint _KinematicCount;
float _KinematicViscosity;

float _SteamRestDensity;
float _SteamPressureConstant;
float _SteamViscosity;

uint _ExplosionCount;
float _ExplosionRadiusSq;
float _MinH;
float _MaxH;
float _CollisionRadius;
float _Multiplier;
float _Demultiplier;
float _DT;

uint _EmitCount;
uint _EmitMinPoolCount;
uint _Flags;
float _LifeTime;
float _SteamLifeTime;

inline float RestDensity(Particle p) {
	return p.flags == TYPE_WATER ? _RestDensity : _SteamRestDensity;
} 

inline float PressureConstant(Particle p) {
	return p.flags == TYPE_WATER ? _PressureConstant : _SteamPressureConstant;
}

inline float Viscosity(Particle p) {
	return p.flags == TYPE_WATER ? _Viscosity : _SteamViscosity;
}

static const float G = -9.81;
static const float SteamG = 5;

inline float Gravity(Particle p) {
	if (p.flags == TYPE_STEAM) {
		return lerp(SteamG, 0, p.life.x / p.life.y);
	} else if (p.flags == TYPE_FIRE) {
		return lerp(G, SteamG, p.life.x / p.life.y);
	} else {
		return G;
	}
}

inline float Drag(Particle p) {
	return 0.0005;
}

[numthreads(256,1,1)]
void Init (uint3 id : SV_DispatchThreadID)
{
	const uint idx = id.x;
	_Particles[idx].flags = 0;
	_Dead.Append(idx);
}

static const uint INVALID_OFFSET = 0xffffffff;
static const uint GRID_PARTITION_BUCKET_COUNT = 1024 * 1024;
inline uint GridHash(int2 cellIndex) {
	const uint p1 = 73856093;   // some large primes 
	const uint p2 = 19349663;
	int n = p1 * cellIndex.x ^ p2 * cellIndex.y;
	n %= GRID_PARTITION_BUCKET_COUNT;
	return n;
}

inline uint GridHash(Particle p) {
	if (p.flags == 0) return GRID_PARTITION_BUCKET_COUNT;
	const int2 cellIndex = floor(p.position);
	return GridHash(cellIndex);
}

inline uint GridHash(KinematicParticle p) {
	const int2 cellIndex = floor(p.position * _Multiplier);
	return GridHash(cellIndex);
}

[numthreads(256,1,1)]
void BitonicSortParticles (uint3 id : SV_DispatchThreadID) {
	const uint i = id.x;
	const uint j = i^_SortBlock;
	
	if (j < i || i >= _SortCount) 
		return;
	
	Particle p_i = _Particles[i];
	Particle p_j = _Particles[j];
	const uint value_i = GridHash(p_i);
	const uint value_j = GridHash(p_j);
	
	const int diff = (value_i - value_j) * ((i&_SortDim) == 0 ? 1 : -1);
	if (diff > 0) {
		_Particles[i] = p_j;
		_Particles[j] = p_i;
	}
}

[numthreads(256,1,1)]
void BitonicSortKinematicParticles (uint3 id : SV_DispatchThreadID) {
	const uint i = id.x;
	const uint j = i^_SortBlock;
	
	if (j < i || i >= _SortCount) 
		return;
	
	KinematicParticle p_i = _KinematicParticles[i];
	KinematicParticle p_j = _KinematicParticles[j];
	const uint value_i = GridHash(p_i);
	const uint value_j = GridHash(p_j);
	
	const int diff = (value_i - value_j) * ((i&_SortDim) == 0 ? 1 : -1);
	if (diff > 0) {
		_KinematicParticles[i] = p_j;
		_KinematicParticles[j] = p_i;
	}
}

[numthreads(256,1,1)]
void ResetCellOffsets (uint3 id : SV_DispatchThreadID) {
	_CellOffsets[id.x] = INVALID_OFFSET;
}

[numthreads(256,1,1)]
void CalculateCellOffsets (uint3 id : SV_DispatchThreadID) {
	const uint idx = id.x;
	Particle p = _Particles[idx];
	if (p.flags != 0) {
		const uint gridHash = GridHash(p);
		InterlockedMin(_CellOffsets[gridHash], idx);
	}
}

[numthreads(256,1,1)]
void CalculateKinematicCellOffsets (uint3 id : SV_DispatchThreadID) {
	const uint idx = id.x;
	if (idx < _KinematicCount) {
		KinematicParticle p = _KinematicParticles[idx];
		const uint gridHash = GridHash(p);
		InterlockedMin(_CellOffsets[gridHash], idx);
	}
}

[numthreads(256,1,1)]
void CalculateDensity (uint3 id : SV_DispatchThreadID)
{
	const uint idx = id.x;
	Particle p = _Particles[idx];
	if (p.flags != 0) {
		const float restDensity = RestDensity(p);

		float density = 0;
		float fireInWaterDensity = 0;
		uint count, stride;
		_Particles.GetDimensions(count, stride);
		for (int x = -1; x < 2; ++x) {
			for (int y = -1; y < 2; ++y) {
				const uint gridHash = GridHash(floor(p.position) + float2(x, y));
				uint i = _CellOffsets[gridHash];
				while (i != INVALID_OFFSET && i < count) {
					Particle o = _Particles[i];
					if (gridHash != GridHash(o)) {
						break;
					}
					const bool fireInWater = p.flags == TYPE_FIRE && o.flags == TYPE_WATER;
					if (o.flags == p.flags || fireInWater) {
						const float2 r = o.position - p.position;
						const float r2 = dot(r, r);
						if (r2 < 1) {
							const float q = 1 - r2;
							if (fireInWater) {
								fireInWaterDensity += q * q * q;
							} else {
								density += q * q * q;
							}
						}
					}
					i++;
				}
			}
		}

		p.density = max(restDensity, Wpoly6 * density);
		if (fireInWaterDensity > 1) {
			p.life.x += p.life.y;
		}
		_Particles[idx] = p;
	}
}

[numthreads(256,1,1)]
void CalculateForce (uint3 id : SV_DispatchThreadID)
{
	const uint idx = id.x;
	Particle p = _Particles[idx];
	if (p.flags == TYPE_FIRE) {
		p.force = float2(0, 0);
		_Particles[idx] = p;
	} else if (p.flags != 0) {
		const float restDensity = RestDensity(p);
		const float pressureConstant = PressureConstant(p);
		const float viscosity = Viscosity(p);

		float2 pForce = float2(0, 0);
		float2 vForce = float2(0, 0);

		float pressure_p = p.density / restDensity;
		pressure_p = pressureConstant * (pressure_p * pressure_p - 1);

		uint count, stride;
		_Particles.GetDimensions(count, stride);
		for (int x = -1; x < 2; ++x) {
			for (int y = -1; y < 2; ++y) {
				const uint gridHash = GridHash(floor(p.position) + float2(x, y));
				uint i = _CellOffsets[gridHash];
				while (i != INVALID_OFFSET && i < count) {
					if (i != idx) {
						Particle o = _Particles[i];
						if (gridHash != GridHash(o)) {
							break;
						}
						if (o.flags == p.flags) {
							const float2 _r = o.position - p.position;
							const float r = max(0.001, length(_r));
							if (r < 1) {
								float pressure_n = o.density / restDensity;
								pressure_n = pressureConstant * (pressure_n * pressure_n - 1);
								const float q = 1 - r;
								pForce += _r / r * ((pressure_p + pressure_n) / (2 * o.density) * q * q);

								const float2 _v = o.velocity - p.velocity;
								vForce += _v * (1 / o.density * q);
							}
						}
					}
					i++;
				}
			}
		}

		pForce *= GradientWspiky;
		vForce *= viscosity * LaplacianWviscosity;
		p.force = (pForce + vForce) / p.density;
		_Particles[idx] = p;
	}
}

[numthreads(256,1,1)]
void CalculateKinematicForce (uint3 id : SV_DispatchThreadID)
{
	const uint idx = id.x;
	if (idx < _KinematicCount) {
		KinematicParticle p = _KinematicParticles[idx];
		const float2 position = p.position * _Multiplier;
		const float2 velocity = p.velocity * _Multiplier;
		float density = 0;
		float2 vForce = float2(0, 0);

		uint count, stride;
		_Particles.GetDimensions(count, stride);
		for (int x = -1; x < 2; ++x) {
			for (int y = -1; y < 2; ++y) {
				const uint gridHash = GridHash(floor(position) + float2(x, y));
				uint i = _CellOffsets[gridHash];
				while (i != INVALID_OFFSET && i < count) {
					Particle o = _Particles[i];
					if (gridHash != GridHash(o)) {
						break;
					}
					if (o.flags == TYPE_WATER) {
						const float2 _r = o.position - position;
						const float r2 = dot(_r, _r);
						if (r2 < 1) {
							const float q = 1 - r2;
							density += q * q * q;

							const float r = sqrt(r2);
							const float2 _v = o.velocity - velocity;
							const float d = o.density;						
							vForce += _v * ((1 - r) / (d * d));
						}
					}
					i++;
				}
			}
		}

		density = step(_RestDensity, Wpoly6 * density);
		vForce *= _KinematicViscosity * LaplacianWviscosity;
		_KinematicForcesAndBuoyances[idx] = float3(vForce, density);
	}
}

[numthreads(256,1,1)]
void CalculateForce2 (uint3 id : SV_DispatchThreadID)
{
	const uint idx = id.x;
	Particle p = _Particles[idx];
	if (p.flags != 0) {
		float2 kForce = float2(0, 0);

		for (int x = -1; x < 2; ++x) {
			for (int y = -1; y < 2; ++y) {
				const uint gridHash = GridHash(floor(p.position) + float2(x, y));
				uint i = _CellOffsets[gridHash];
				while (i != INVALID_OFFSET && i < _KinematicCount) {
					KinematicParticle o = _KinematicParticles[i];
					if (gridHash != GridHash(o)) {
						break;
					}
					const float2 _r = o.position * _Multiplier - p.position;
					const float r = length(_r);
					if (r < 1) {
						const float q = 1 - r;
						const float2 _v = o.velocity * _Multiplier - p.velocity;
						kForce += _v * q;
					}
					i++;
				}
			}
		}

		kForce *= _KinematicViscosity * LaplacianWviscosity;
		kForce /= p.density * p.density;

		float2 eForce = float2(0, 0);

		for (uint i = 0; i < _ExplosionCount; ++i) {
			Explosion e = _Explosions[i];
			float2 _r = p.position - e.position * _Multiplier;
			float r2 = dot(_r, _r);
			if (r2 < _ExplosionRadiusSq) {
				const float q = 1 - r2 / _ExplosionRadiusSq;
				eForce += _r * (e.force * q / max(0.001, sqrt(r2)));
			}
		}

		p.force += kForce + eForce;
		_Particles[idx] = p;
	}
}

[numthreads(256,1,1)]
void Update (uint3 id : SV_DispatchThreadID)
{
	const uint idx = id.x;
	Particle p = _Particles[idx];
	if (p.flags != 0) {
		const float h = length(p.position);
		if (p.flags == TYPE_WATER && h <= _MinH) {
			p.flags = TYPE_STEAM;
			p.velocity = float2(0, 0);
			p.life = float2(0, _SteamLifeTime);
		}
		p.life.x += _DT;
		if (p.life.x > p.life.y || h > _MaxH) {
			p.flags = 0;
		} else {
			const float viscosity = Viscosity(p);
			const float g = Gravity(p);

			float2 tForce = float2(0, 0);
			const float2 uv = _Demultiplier * p.position * _TerrainDistanceFieldScale.xy + 0.5;
			const float3 td = 2 * _TerrainDistanceField.SampleLevel(sampler_TerrainDistanceField, uv, 0) - 1;
			const float distance = min(td.x * _Multiplier - _CollisionRadius, h - _MinH);
			if (distance < 1) {
				const float q = 1 - max(0, distance);
				float2 _v = -p.velocity;
				tForce = _v * (viscosity * LaplacianWviscosity / (p.density * p.density) * q);
			}

			const float2 up = p.position / h;
			p.velocity += (p.force + tForce + g * _Multiplier * up) * _DT;
			if (distance > -1) {
				if (distance < 0) {
					const float2 n = td.yz;
					const float vn = max(0, -dot(p.velocity, n));
					p.velocity += 1.1 * vn * n;
				}
				const float speed = length(p.velocity);
				const float drag = Drag(p);
				p.velocity -= drag * speed * p.velocity;
				p.position += p.velocity * _DT;
			} else {
				p.flags = 0;
			}
		}
		if (p.flags == TYPE_WATER) {
			_Alive.Append(idx);
		} else if (p.flags == TYPE_STEAM) {
			_SteamAlive.Append(idx);
		} else if (p.flags == TYPE_FIRE) {
			_FireAlive.Append(idx);
		} else {
			_Dead.Append(idx);
		}
		_Particles[idx] = p;
	}
}

[numthreads(256,1,1)]
void Emit (uint3 id : SV_DispatchThreadID)
{
	uint idx = id.x;
	if (idx < _EmitCount && idx < _Counter[_CounterOffset] - _EmitMinPoolCount) {
		float4 upload = _Uploads[idx];
		idx = _Pool.Consume();
		Particle p = _Particles[idx];
		p.flags = _Flags;
		p.position = upload.xy;
		p.velocity = upload.zw;
		p.life = float2(0, _LifeTime);
		_Particles[idx] = p;
	}
}